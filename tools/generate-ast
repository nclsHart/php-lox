#!/usr/bin/env php
<?php

require_once __DIR__ . '/../vendor/autoload.php';

use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\PhpFile;
use Nette\PhpGenerator\PsrPrinter;

const EXPR_DIR = __DIR__ . '/../src/Expr';
const STMT_DIR = __DIR__ . '/../src/Stmt';

defineAst(EXPR_DIR, 'Expr', [
    'Assign   : Lox\Token name, Lox\Expr\Expr value',
    'Binary   : Lox\Expr\Expr left, Lox\Token operator, Lox\Expr\Expr right',
    'Grouping : Lox\Expr\Expr expression',
    'Literal  : value',
    'Unary    : Lox\Token operator, Lox\Expr\Expr right',
    'Variable : Lox\Token name',
]);

defineAst(STMT_DIR, 'Stmt', [
    'ExpressionStmt : Lox\Expr\Expr expression',
    'PrintStmt      : Lox\Expr\Expr expression',
    'VarStmt        : Lox\Token name, Lox\Expr\Expr initializer',
]);

function defineAst(string $outputDir, string $baseName, array $types): void
{
    if (!is_dir($outputDir)) {
        mkdir($outputDir);
    }

    $baseClass = generateBaseClass($baseName);
    writeClass($outputDir, $baseName, $baseClass);

    $visitorInterface = generateVisitor($baseName, $types);
    writeClass($outputDir, $baseName, $visitorInterface);

    foreach ($types as $type) {
        $parts = explode(':', $type);
        $className = trim($parts[0]);
        $propertiesAsString = trim($parts[1]);

        $properties = explode(',', $propertiesAsString);

        $typeClass = generateType($baseName, $className, $properties);
        writeClass($outputDir, $baseName, $typeClass);
    }
}

function generateBaseClass(string $baseName): ClassType
{
    $class = new ClassType($baseName);
    $class->setAbstract();

    $method = $class->addMethod('accept');
    $method->setAbstract();
    $param = $method->addParameter('visitor');
    $param->setTypeHint(sprintf('\Lox\%s\Visitor', $baseName));

    return $class;
}

function generateVisitor(string $baseName, array $types): ClassType
{
    $class = new ClassType('Visitor');
    $class->setType('interface');

    foreach ($types as $type) {
        $parts = explode(':', $type);
        $typeName = trim($parts[0]);

        // because Stmt classes already have Stmt suffix
        if (strpos($typeName, $baseName)) {
            $method = $class->addMethod(sprintf('visit%s', $typeName));
        } else {
            $method = $class->addMethod(sprintf('visit%s%s', $typeName, $baseName));
        }
        $method->setVisibility('public');
        $param = $method->addParameter(strtolower($baseName));
        $param->setTypeHint(sprintf('Lox\%s\%s', $baseName, $typeName));
    }

    return $class;
}

function generateType(string $baseName, string $className, array $properties = []): ClassType
{
    $class = new ClassType($className);
    $class->addExtend(sprintf('\Lox\%s\%1$s', $baseName));
    $class->setFinal();

    $constructor = $class->addMethod('__construct');

    foreach ($properties as $property) {
        $parts = explode(' ', trim($property));

        $type = null;
        if (isset($parts[1])) {
            $type = $parts[0];
            $propertyName = $parts[1];
        } else {
            $propertyName = $parts[0];
        }

        // add property
        $property = $class->addProperty($propertyName);
        $property->setVisibility('private');

        // add constructor parameter and init property
        $parameter = $constructor->addParameter($propertyName);
        if (null !== $type) {
            $parameter->setTypeHint($type);
        }
        $constructor->addBody('$this->? = $?;', [$propertyName, $propertyName]);

        // add getter
        $getter = $class->addMethod($propertyName);
        if (null !== $type) {
            $getter->setReturnType($type);
        }
        $getter->addBody('return $this->?;', [$propertyName]);

        // implements accept method
        $method = $class->addMethod('accept');
        $param = $method->addParameter('visitor');
        $param->setTypeHint(sprintf('\Lox\%s\Visitor', $baseName));

        if (strpos($className, $baseName)) {
            $method->addBody(sprintf('return $visitor->visit%s($this);', $className));
        } else {
            $method->addBody(sprintf('return $visitor->visit%s%s($this);', $className, $baseName));
        }
    }

    return $class;
}

function writeClass(string $outputDir, string $baseName, ClassType $class): void
{
    $file = new PhpFile();
    $file->addComment('This file is auto-generated.');
    $file->setStrictTypes();

    $namespace = $file->addNamespace(sprintf('Lox\%s', $baseName));
    $namespace->add($class);

    if ($class->hasMethod('__construct')) {
        $constructor = $class->getMethod('__construct');
        foreach ($constructor->getParameters() as $parameter) {
            if (null !== $parameter->getTypeHint() && !in_array($parameter->getTypeHint(), $namespace->getUses())) {
                $namespace->addUse($parameter->getTypeHint());
            }
        }
    }

    file_put_contents(
        sprintf('%s/%s.php', $outputDir, $class->getName()),
        (new PsrPrinter)->printFile($file)
    );
}
